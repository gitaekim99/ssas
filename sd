include <iostream>
#include <algorithm>        // max
#include "LinkedBSTree.h"   // LinkedBSTree
using namespace std;

// 전체 원소 출력, 데이터 검색, 삽입, 삭제
template <typename E>   void    printBSTAll(LinkedBSTree<E>& bst);
template <typename E>   void	SearchBST(LinkedBSTree<E>& bst);
template <typename E>   void	InsertBST(LinkedBSTree<E>& bst);
template <typename E>   void	DeleteBST(LinkedBSTree<E>& bst);

int main(void)
{
	int                  num;
	LinkedBSTree<int>    bst;

	while (true) {
		system("cls");
		cout << "\n ##### 이진 검색 트리 ##### \n" << endl;
		cout << "1) 데이터 삽입" << endl;
		cout << "2) 데이터 삭제" << endl;
		cout << "3) 데이터 검색" << endl;
		cout << "4) 전체 원소 출력" << endl;
		cout << "5) 프로그램 종료" << endl;
		cout << "\n메뉴 선택: ";
		cin >> num;

		switch (num) {
		case 1: InsertBST(bst);	    break;
		case 2: DeleteBST(bst);	    break;
		case 3: SearchBST(bst);	    break;
		case 4: printBSTAll(bst);   break;
		case 5: cout << "프로그램 종료!!!\n" << endl;
			return 0;
		default: cout << "메뉴를 잘못 선택하셨습니다." << endl;
		}
		system("pause");
	}
	return 0;
}

// 이진 검색 트리(BST): 전체 노드 출력(전위 순회)
template <typename E>
void    printBSTAll(LinkedBSTree<E>& bst) {
	cout << "\n이진 검색 트리: 전체 원소 출력" << endl;
	bst.Preorder(bst.getRoot());
	cout << "\n" << endl;
}

// 이진 검색 트리(BST): 데이터 검색
template <typename E>
void	SearchBST(LinkedBSTree<E>& bst) {
	int          num;
	DNode<E>* tNode = nullptr;

	cout << "\n이진 검색 트리: 데이터 검색" << endl;
	while (true) {
		cout << "임의의 정수 입력(종료: 0): ";
		cin >> num;
		if (num == 0)
			break;

		// 데이터 검색
		tNode = bst.searchBST(bst.getRoot(), num);
		if (tNode)	cout << tNode->getData() << " 키를 찾았습니다!!!" << endl;
		else		cout << "키를 찾지 못했습니다." << endl;
	}
}

// 이진 검색 트리(BST): 데이터 삽입
template <typename E>
void	InsertBST(LinkedBSTree<E>& bst) {
	int	        num;
	DNode<E>* root = nullptr;

	cout << "\n이진 검색 트리: 데이터 삽입" << endl;
	while (true) {
		cout << "임의의 정수 입력(종료: 0): ";
		cin >> num;
		if (num == 0)
			break;

		// 데이터 삽입
		root = bst.insertBST(bst.getRoot(), num);
		if (root != bst.getRoot())
			bst.setRoot(root);
	}
}

// 이진 검색 트리(BST): 데이터 삭제
template <typename E>
void	DeleteBST(LinkedBSTree<E>& bst) {
	int	        num;
	DNode<E>* root = nullptr;

	cout << "\n이진 검색 트리: 데이터 삭제" << endl;
	while (true) {
		cout << "임의의 정수 입력(종료: 0): ";
		cin >> num;
		if (num == 0)
			break;

		// 데이터 삭제
		root = bst.deleteBST(bst.getRoot(), num);
		if (root != bst.getRoot())
			bst.setRoot(root);
	}
}

#pragma once
#include <iostream>
#include <queue>
#include <algorithm>    // max
using namespace std;

template <typename E>
class LinkedBSTree;

// class DNode
template <typename E>
class DNode {
public:
	DNode(const E& data);
	E           getData(void) const;
	DNode<E>* getLlink(void) const;
	DNode<E>* getRlink(void) const;
private:
	E          	 __data;
	DNode<E>* __Llink;
	DNode<E>* __Rlink;
	template <typename E> friend class LinkedBSTree;
};

// DNode: 멤버 함수 정의
template <typename E>
DNode<E>::DNode(const E& data) :
	__data(data), __Llink(nullptr), __Rlink(nullptr) {}

template <typename E>
E   DNode<E>::getData(void) const { return __data; }

template <typename E>
DNode<E>* DNode<E>::getLlink(void) const { return __Llink; }

template <typename E>
DNode<E>* DNode<E>::getRlink(void) const { return __Rlink; }

// class LinkedBSTree
template <typename E>
class LinkedBSTree {
public:
	LinkedBSTree();
	~LinkedBSTree();
	DNode<E>* getRoot(void) const;
	void		setRoot(DNode<E>* root);
	DNode<E>* insertBST(DNode<E>* root, const E& data) const;
	DNode<E>* deleteBST(DNode<E>* root, const E& data) const;
	DNode<E>* searchBST(DNode<E>* root, const E& data) const;
	void		Preorder(DNode<E>* root) const;
private:
	DNode<E>* __root;
};

// LinkedBSTree: 멤버 함수 정의
template <typename E>
LinkedBSTree<E>::LinkedBSTree() :
	__root(nullptr) {}

// 소멸자: 모든 노드 삭제
// 너비 우선 순회: 큐 구조 활용
template <typename E>
LinkedBSTree<E>::~LinkedBSTree() {
	if (__root == nullptr)
		return;

	DNode<E>* tNode = nullptr;
	queue<DNode<E>*>	Q;
	Q.push(__root);
	while (!Q.empty()) {
		tNode = Q.front();
		Q.pop();
		if (tNode->__Llink) Q.push(tNode->__Llink);
		if (tNode->__Rlink) Q.push(tNode->__Rlink);
		delete tNode;
	}
}

template <typename E>
void        LinkedBSTree<E>::setRoot(DNode<E>* root) {
	__root = root;
}

template <typename E>
DNode<E>* LinkedBSTree<E>::getRoot(void) const {
	return __root;
}

// 깊이 우선 순회: 전위 순회(재귀적 용법)
template <typename E>
void	LinkedBSTree<E>::Preorder(DNode<E>* root) const {
	if (root) {
		cout.width(3);	 cout << root->__data;
		Preorder(root->__Llink);
		Preorder(root->__Rlink);
	}
}

// 이진 검색 트리(BST): 데이터 검색 -- 재귀적 용법
template <typename E>
DNode<E>* LinkedBSTree<E>::searchBST(DNode<E>* root, const E& data) const {
	if (root == nullptr || data == root->__data)
		return root;

	DNode<E>* tNode = nullptr;
	if (data < root->__data)		tNode = searchBST(root->__Llink, data);
	else if (data > root->__data)	tNode = searchBST(root->__Rlink, data);
	return tNode;
}

// 이진 검색 트리(BST): 데이터 삽입 -- 재귀적 용법
template <typename E>
DNode<E>* LinkedBSTree<E>::insertBST(DNode<E>* root, const E& data) const {
	// 탐색 실패: 새로운 노드 생성
	DNode<E>* newNode = nullptr;
	if (root == nullptr) {
		newNode = new DNode<E>(data);
		return newNode;
	}

	// 중복된 데이터가 존재할 경우 데이터 삽입 불가능!!!
	if (data == root->__data))
	cout << "이미 같은 키가 있습니다!!!" << endl;
	else if (data < root->__data)   root->__Llink = insertBST(root->__Llink, data);
	else if (data > root->__data)   root->__Rlink = insertBST(root->__Rlink, data);

	return root;
}

// 이진 검색 트리(BST): 데이터 삭제 -- 비재귀적 용법
template <typename E>
DNode<E>* LinkedBSTree<E>::deleteBST(DNode<E>* root, const E& data) const {
	// 삭제할 노드가 없는 경우
	if (root == nullptr) {
		cout << "\n키를 찾지 못했습니다." << endl;
		return root;
	}

	DNode<E>* pParent = nullptr;	// 삭제할 노드의 부모 노드
	DNode<E>* tNode = root;	// 삭제할 노드
	DNode<E>* pChild;		// 삭제할 노드의 자식 노드

	// 삭제할 노드의 위치 탐색
	while (data != tNode->__data) {
		pParent = tNode;
		if (data < tNode->__data) tNode = tNode->__Llink;
		else tNode = tNode->__Rlink;
	}

	// 1) 삭제할 노드가 단말 노드인 경우
	if ((tNode->__Llink == nullptr) && (tNode->__Rlink == nullptr)) {
		if (pParent == nullptr)	root = nullptr;
		else if (pParent != nullptr) {
			if (pParent->__Llink == tNode)	pParent->__Llink = nullptr;
			else				pParent->__Rlink = nullptr;
		}
	}
	// 2) 삭제할 노드가 자식 노드를 한 개 가진 경우
	else if ((tNode->__Llink == nullptr) || (tNode->__Rlink == nullptr)) {
		// pChild : (후계자) 삭제할 노드의 자식 노드
		if (tNode->__Llink != nullptr)	pChild = tNode->__Llink;
		else			pChild = tNode->__Rlink;

		if (pParent == nullptr)	root = pChild;
		else {
			if (pParent->__Llink == tNode)	pParent->__Llink = pChild;
			else				pParent->__Rlink = pChild;
		}
	}
	// 3) 삭제할 노드가 자식 노드를 두 개 가진 경우
	else {
		// 왼쪽 서브 트리에서 후계자(최댓값) 찾기
		DNode<E>* sParent = tNode;
		DNode<E>* sNode = tNode->__Llink;
		while (sNode->__Rlink != nullptr) {
			sParent = sNode;
			sNode = sNode->__Rlink;
		}

		if (sParent->__Llink == sNode)
			sParent->__Llink = sNode->__Llink;
		else
			sParent->__Rlink = sNode->__Llink;

		tNode->__data = sNode->__data;
		tNode = sNode;
	}
	delete tNode;

	return root;
}


#include <iostream>
#include <stack>
#include<queue>
using namespace std;

// GNode class
class GNode {
private:
	int	__vertex;	// 정점
	int	__weight;	// 가중치
	GNode* __link;
	friend class GraphType;
public:
	GNode(int vertex, int weight);
};

// 그래프 노드(C): 그래프 노드 생성
GNode::GNode(int vertex = 0, int weight = 0)
	: __vertex(vertex), __weight(weight), __link(nullptr) {}

// GraphType class
class GraphType {
private:
	int	  __vertex;		// 정점의 개수
	GNode** __adjSList;		// 인접 리스트
public:
	GraphType(int vertex);
	~GraphType(void);
	void	insertEdge(int vertex1, int vertex2, int weight);
	void	DFSAdjSList(int  vertex);
	void    BFSAdjSList(int vertex);
	void	printAdjSList(void) const;
};

// GraphType: 생성자(소멸자)와 메소드 정의
GraphType::GraphType(int vertex) : __vertex(vertex) {
	__adjSList = new GNode * [vertex + 1];
	memset(__adjSList, 0, sizeof(GNode*) * (vertex + 1));
}

// graphDestroy : 그래프 삭제
GraphType::~GraphType(void) {
	GNode* old;
	for (int i = 0; i < __vertex; i++) {
		old = __adjSList[i];
		while (old) {
			__adjSList[i] = old->__link;
			delete old;
			old = __adjSList[i];
		}
	}
	delete[] __adjSList;
}

// insertEdge : 간선 추가
void  GraphType::insertEdge(int  row, int  col, int weight) {
	if (row >= __vertex || col >= __vertex) {
		// cout << "그래프에 없는 정점입니다!!!" << endl;
		return;
	}
	GNode* newGNode = new GNode(col, weight);
	if (__adjSList[row] == nullptr)
		__adjSList[row] = newGNode;
	else {
		GNode* rNode = __adjSList[row];
		while (rNode->__link)
			rNode = rNode->__link;
		rNode->__link = newGNode;
	}
}

// printAdjMatrix : 그래프 전체 출력
void  GraphType::printAdjSList(void) const {
	char	ch;
	for (int i = 0; i < __vertex; i++) {
		ch = i + 65;
		cout << "\t정점 " << ch << "의 인접 리스트";
		GNode* tNode = __adjSList[i];
		while (tNode) {
			cout.width(3);
			ch = tNode->__vertex + 65;
			cout << ch << " ->>";
			tNode = tNode->__link;
		}
		cout << " NULL" << endl;
	}
}
void GraphType::DFSAdjSList(int  vertex) {
	int* pVisited = new int[__vertex];
	memset(pVisited, 0, sizeof(int) * __vertex);

	stack<int> S;
	S.push(vertex);
	pVisited[vertex] = true;
	char ch = vertex + 65;
	cout.width(3); cout << ch;

	int v = vertex;
	GNode* w;
	while (!S.empty()) {
		w = __adjSList[v];
		while (w) {
			if (!pVisited[w->__vertex]) {
				S.push(w->__vertex);
				pVisited[w->__vertex] = true;
				ch = w->__vertex + 65;
				cout.width(3); cout << ch;
				v = w->__vertex;
				w = __adjSList[v];
			}
			else w = w->__link;
		}
		v = S.top(); S.pop();
	}
	cout << endl;
	delete[]pVisited;
}

void GraphType::BFSAdjSList(int  vertex) {
	int* pVisited = new int[__vertex];
	memset(pVisited, 0, sizeof(int) * __vertex);
	queue<int> Q;
	Q.push(vertex);
	pVisited[vertex] = true;
	char ch = vertex + 65;
	cout.width(3); cout << ch;

	int v = vertex;
	GNode* w;
	while (!Q.empty()) {
		v = Q.front(); Q.pop();
		w = __adjSList[v];
		while (w) {
			if (!pVisited[w->__vertex]) {
				Q.push(w->__vertex);
				pVisited[w->__vertex] = true;
				char ch = w->__vertex + 65;
				cout.width(3); cout << ch;
			}
			w = w->__link;
		}
	}
	cout << endl;
	delete[] pVisited;
}

int main(void)
{
	// G9 : 무향 그래프
	GraphType	G9 = GraphType(7);

	// 정점: A(0)
	G9.insertEdge(0, 1, 0);	// A(0) - B(1)
	G9.insertEdge(0, 2, 0);	// A(0) - C(2)

	// 정점: B(1)
	G9.insertEdge(1, 0, 0);	// B(1) - A(0)
	G9.insertEdge(1, 3, 0);	// B(1) - D(3)
	G9.insertEdge(1, 4, 0);	// B(1) - E(4)

	// 정점: C(2)
	G9.insertEdge(2, 0, 0);	// C(2) - A(0)
	G9.insertEdge(2, 4, 0);	// C(2) - E(4)

	// 정점: D(3)
	G9.insertEdge(3, 1, 0);	// D(3) - B(6)
	G9.insertEdge(3, 6, 0);	// D(3) - G(6)

	// 정점: E(4)
	G9.insertEdge(4, 1, 0);	// E(4) - B(1)
	G9.insertEdge(4, 2, 0);	// E(4) - C(2)
	G9.insertEdge(4, 6, 0);	// E(4) - G(6)

	// 정점: F(5)
	G9.insertEdge(5, 6, 0);	// F(5) - G(6)

	// 정점: G(6)
	G9.insertEdge(6, 3, 0);	// G(6) - F(5)
	G9.insertEdge(6, 4, 0);	// G(6) - E(4)
	G9.insertEdge(6, 5, 0);	// G(6) - D(3)

	cout << "\n##### 그래프(G9): 인접 리스트 #####\n" << endl;
	G9.printAdjSList();

	printf("\n##### 그래프(G9): 깊이 우선 탐색(DFS) #####\n\n");
	G9.DFSAdjSList(0);

	cout << "\n#### 그래프(G9): 너비 우선 탐색(BFS) #### \n\n";
	G9.BFSAdjSList(0);
	return 0;
}
